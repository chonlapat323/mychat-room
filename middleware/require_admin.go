package middleware

import (
	"context"
	"mychat-room/contextkey"
	"mychat-room/utils"
	"net/http"
)

// RequireAdmin ‡πÄ‡∏õ‡πá‡∏ô middleware ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ token ‡∏°‡∏µ role ‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func RequireAdmin(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		tokenCookie, err := r.Cookie("token")
		if err != nil || tokenCookie.Value == "" {
			http.Error(w, "Missing token", http.StatusUnauthorized)
			return
		}
		claims, err := utils.ValidateToken(tokenCookie.Value)
		if err != nil {
			http.Error(w, "Invalid token", http.StatusUnauthorized)
			return
		}
		if claims.Role != "admin" {
			http.Error(w, "Forbidden: admin only", http.StatusForbidden)
			return
		}
		// ‡∏™‡πà‡∏á user_id ‡πÅ‡∏•‡∏∞ role ‡πÄ‡∏Ç‡πâ‡∏≤ context
		ctx := context.WithValue(r.Context(), contextkey.UserID, claims.UserID)
		ctx = context.WithValue(ctx, contextkey.Role, claims.Role) // üîß ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å key ‡∏î‡πâ‡∏ß‡∏¢
		next(w, r.WithContext(ctx))
	}
}
